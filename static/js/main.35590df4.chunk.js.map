{"version":3,"sources":["Components/Headers/Header.js","Components/AddTodo/AddTodo.js","Components/DoneList/DoneList.js","Components/todoItems/Button/Button.js","Components/todoItems/todoItems.js","Components/History/History.js","Container/TodoList/Todolist.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","Button","to","exact","style","color","textDecoration","activeStyle","useStyles","makeStyles","theme","button","margin","spacing","input","display","AddTodo","classes","type","onChange","changed","value","placeholder","variant","onClick","clicked","cleared","doneList","borderRadius","finishList","getTime","ButtonDED","doneSet","editSet","deleteSet","TodoItems","state","textSomething","isEdit","clickDoneList","clickDone","editTodoBox","showTodoName","this","todoName","editTodoButton","buttonAll","setState","delete","setButton","isDoneYet","event","target","editValue","editTextChange","itemID","Component","HistoryTodo","key","Date","action","time","TodoList","addTodo","addList","editText","historyAction","historyTime","toLocaleString","doneLists","doneTime","addItemHandler","todo","console","log","concat","deleteItemHandler","index","deleteList","splice","editItemHandler","textIncome","updateTodo","ClearItemHandler","DoneListHandler","list","updateDoneItem","updateOldList","updateTimeAction","alert","displayList","map","displayHistory","ls","id","showDoneList","exat","path","render","textAlign","from","App","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.35590df4.chunk.js","sourcesContent":["import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport Button from '@material-ui/core/Button';\r\nimport './Headers.css';\r\n\r\n\r\n\r\n\r\n\r\nconst Header = ( props ) => {\r\n\r\n\r\n    \r\n\r\n    return (\r\n            <div className=\"Headers\">\r\n            <Button>\r\n                <NavLink \r\n                    to='/Todo-List/add-todo' exact \r\n                    style={{\r\n                        color: 'white',\r\n                        textDecoration: 'inherit'\r\n                    }}\r\n                    activeStyle={{  color: '#FFD801',\r\n                                    textDecoration: 'inherit',\r\n                                }}>Home</NavLink>\r\n            </Button>\r\n            \r\n            <Button>\r\n                <NavLink \r\n                    to='/Todo-List/done-lists'\r\n                    style={{\r\n                        color: 'white',\r\n                        textDecoration: 'inherit'\r\n                    }}\r\n                    activeStyle={{  color: '#FFD801',\r\n                                    textDecoration: 'inherit'\r\n                                }}\r\n                     >Done Lists</NavLink>\r\n            </Button>\r\n            \r\n            <Button>\r\n                <NavLink \r\n                    to='/Todo-List/history'\r\n                    style={{\r\n                        color: 'white',\r\n                        textDecoration: 'inherit'\r\n                    }}\r\n                    activeStyle={{  color: '#FFD801',\r\n                                    textDecoration: 'inherit'\r\n                                }}>History </NavLink> \r\n            </Button>\r\n            </div>\r\n    )\r\n};\r\n\r\nexport default Header;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport './AddTodo.css';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    button: {\r\n      margin: theme.spacing(0.5),\r\n    },\r\n    input: {\r\n      display: 'none',\r\n    },\r\n  }));\r\n\r\nconst AddTodo = ( props ) => {\r\n    \r\n    const classes = useStyles();\r\n    \r\n    return <div className=\"AddTodo\" >\r\n        <input  type='text' onChange={props.changed} value={props.value} placeholder='INPUT SOME TODO' />\r\n        <div>\r\n          <Button type='submit' variant=\"contained\" color=\"primary\" onClick={props.clicked} className={classes.button}>ADD</Button>\r\n          <Button type='submit' variant=\"contained\" color=\"secondary\" onClick={props.cleared} className={classes.button} >CLEAR ALL</Button>\r\n        </div>\r\n        \r\n    </div>\r\n}\r\n\r\nexport default AddTodo;\r\n\r\n","import React from 'react';\r\nimport './DoneList.css';\r\n\r\nconst doneList = ( props ) => {\r\n\r\n        return (\r\n            <div className=\"DoneList\">\r\n                \r\n                <table >\r\n                    <tbody>\r\n                        <tr>\r\n                            <th style={{borderRadius: '10px 0px 0px 0px'}}>Finished Lists</th>\r\n                            <th style={{borderRadius: '0px 10px 0px 0px'}}>Time Stamps</th>\r\n                        </tr>\r\n                    </tbody>\r\n\r\n                    <tbody>\r\n                        <tr>\r\n                            <td style={{borderRadius: '0px 0px 0px 10px'}}>{props.finishList}</td>\r\n                            <td style={{borderRadius: '0px 0px 10px 0px'}}>{props.getTime}</td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>)\r\n    \r\n}\r\n\r\nexport default doneList;","import React from 'react';\r\nimport { Button, makeStyles } from '@material-ui/core';\r\nimport './Button.css';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    button: {\r\n      margin: theme.spacing(0.5),\r\n    }\r\n  }));\r\n\r\nconst ButtonDED = (props) => {\r\n\r\n    const classes = useStyles();\r\n    return(\r\n            <div>\r\n                <Button onClick={props.doneSet} variant=\"contained\" className={classes.button} >DONE</Button>\r\n                <Button onClick={props.editSet} variant=\"contained\" color=\"primary\" className={classes.button}>EDIT</Button>\r\n                <Button onClick={props.deleteSet} variant=\"contained\" color=\"secondary\" className={classes.button}>DELETE</Button>\r\n            </div>\r\n            )\r\n    };\r\n\r\nexport default ButtonDED;","import React, { Component } from 'react';\r\nimport ALLButton from './Button/Button';\r\nimport { Button } from '@material-ui/core';\r\nimport './todoItem.css';\r\n\r\nclass TodoItems extends Component  {\r\n\r\n    state = {\r\n        textSomething: '',\r\n        isEdit: false,\r\n    }\r\n\r\n    clickDoneList= () => {\r\n        return this.props.clickDone\r\n    }\r\n\r\n    render() {\r\n\r\n        let showTodoName = this.props.todoName;\r\n        let editTodoBox, editTodoButton = null;\r\n        let isDone = null;\r\n        \r\n        const buttonAll =  ( <ALLButton\r\n                                doneSet = {this.props.clickDone}\r\n                                editSet = {() => this.setState({isEdit: !this.state.isEdit})}\r\n                                deleteSet = {this.props.delete}\r\n                               \r\n            /> );\r\n        \r\n        let setButton = this.state.isDoneYet ? null: buttonAll;\r\n        \r\n        if(this.state.isEdit) {\r\n            showTodoName = null;\r\n            editTodoBox =(\r\n                <input \r\n                    className=\"EditBox\"\r\n                    type='text' \r\n                    onChange={(event) => this.setState({textSomething: event.target.value})} \r\n                    value={this.props.editValue} \r\n                    placeholder={this.props.todoName} />\r\n            )\r\n            editTodoButton = (\r\n                <Button \r\n                    variant='contained'                \r\n                    onClick={() => (\r\n                    this.props.editTextChange(this.state.textSomething)) + \r\n                    this.setState({isEdit: false} \r\n                    //,console.log(this.state.textSomething)\r\n                        )} > OK </Button>\r\n            ) \r\n            \r\n        }\r\n\r\n        return (\r\n            <div className=\"TodoItem\"> \r\n                <h3>List No. {this.props.itemID+1}</h3>\r\n                    <ul>\r\n                        {isDone}\r\n                        <li>{showTodoName}</li>\r\n                        {editTodoBox}\r\n                        {editTodoButton}\r\n                    </ul>            \r\n                {setButton}              \r\n            </div>\r\n        )}\r\n}\r\n\r\nexport default TodoItems;","import React, { Component } from 'react';\r\nimport './History.css';\r\n\r\nclass HistoryTodo extends Component {\r\n\r\n    render() {\r\n\r\n        return(\r\n            <div className=\"History\" key={new Date ()}>\r\n                \r\n                <table >\r\n                    <tbody>\r\n                        <tr>\r\n                            <th style={{borderRadius: '10px 0px 0px 0px'}}>Actions</th>\r\n                            <th style={{borderRadius: '0px 10px 0px 0px'}}>Time</th>\r\n                        </tr>\r\n                    </tbody>\r\n\r\n                    <tbody>\r\n                        <tr>\r\n                            <td style={{borderRadius: '0px 0px 0px 10px'}}>{this.props.action}</td>\r\n                            <td style={{borderRadius: '0px 0px 10px 0px'}}>{this.props.time}</td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default HistoryTodo;","import React, { Component } from 'react';\r\nimport AddTodo from '../../Components/AddTodo/AddTodo';\r\nimport DoneList from '../../Components/DoneList/DoneList';\r\nimport TodoItem from '../../Components/todoItems/todoItems';\r\nimport TodoHistory from '../../Components/History/History';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport './TodoList.css';\r\n\r\n\r\nclass TodoList extends Component {\r\n\r\n    state = {\r\n        addTodo : '',\r\n        addList : [],\r\n        editText: '',\r\n        historyAction: ['App Starting'],\r\n        historyTime: [`${new Date().toLocaleString()}`],\r\n        doneLists: [],\r\n        doneTime:[]\r\n    }\r\n\r\n\r\n    addItemHandler = (todo) => {\r\n        console.log('[ADD] : {' + todo + '}');\r\n        const action = (<h4 key={todo} style={{color: 'green'}}>Add ITEM</h4>);\r\n        const time = (<h4 key={todo} style={{color: 'green'}}>{this.getTime()}</h4>);\r\n        this.setState({\r\n            addList: this.state.addList.concat(todo),\r\n            addTodo: '',\r\n            historyAction:  this.state.historyAction.concat(action),\r\n            historyTime: this.state.historyTime.concat(time)\r\n        });\r\n        \r\n    }\r\n\r\n    deleteItemHandler = (index) => {\r\n       //console.log('Deleted Button Activated');\r\n        const action = (<h4 key={index} style={{color: 'red'}}>Delete ITEM</h4>);\r\n        const time = (<h4 key={index} style={{color: 'red'}}>{this.getTime()}</h4>);\r\n        const deleteList = this.state.addList;\r\n            deleteList.splice(index,1);\r\n        this.setState({\r\n            addList: deleteList,\r\n            historyAction:  this.state.historyAction.concat(action),\r\n            historyTime: this.state.historyTime.concat(time)\r\n        })\r\n    }\r\n\r\n    editItemHandler = (textIncome, index) => {\r\n        console.log('Edit Start! @ '+ textIncome + index);\r\n        const action = (<h4 key={index} style={{color: '#FF5722'}}>Edit ITEM</h4>);\r\n        const time = (<h4 key={index} style={{color: '#FF5722'}}>{this.getTime()}</h4>);\r\n        const updateTodo = this.state.addList;\r\n        updateTodo.splice(index,1);\r\n        updateTodo.splice(index, 0, textIncome);\r\n\r\n        this.setState({\r\n            addList: updateTodo,\r\n            historyAction:  this.state.historyAction.concat(action),\r\n            historyTime: this.state.historyTime.concat(time)\r\n        });\r\n    }\r\n\r\n    ClearItemHandler = () => {\r\n        const action = (<h4 key={'clear'} style={{ color: '#3F51B5'}}>Clear All List</h4>);\r\n        const time = (<h4 key={'clear'} style={{ color: '#3F51B5'}}>{this.getTime()}</h4>);\r\n        this.setState({\r\n            addList: [],\r\n            historyAction:  this.state.historyAction.concat(action),\r\n            historyTime: this.state.historyTime.concat(time)\r\n        })\r\n    }\r\n\r\n    DoneListHandler = (list, index) => {\r\n        const action = (<h4 key={index} style={{ color: '#009688'}}>Task Finished</h4>);\r\n        const time = (<h4 key={index} style={{ color: '#009688'}}>{this.getTime()}</h4>);\r\n        const updateDoneItem  = list;\r\n        const updateOldList = this.state.addList;\r\n        updateOldList.splice(index, 1);\r\n        this.setState({\r\n            doneLists: this.state.doneLists.concat(updateDoneItem),\r\n            addList: updateOldList\r\n        })\r\n        this.updateTimeAction(action, time)\r\n        alert('This task was finish! You can see it at DoneList');\r\n    }\r\n\r\n    getTime() {\r\n        const currentTime = new Date().toLocaleString();\r\n        return currentTime;\r\n    }\r\n\r\n    updateTimeAction(action, time) {\r\n        this.setState({\r\n            historyAction:  this.state.historyAction.concat(action),\r\n            historyTime: this.state.historyTime.concat(time),\r\n            doneTime: this.state.doneTime.concat(time)\r\n        })\r\n    }\r\n    \r\n\r\n    render() {\r\n\r\n        const displayList = this.state.addList.map((list, index) => {\r\n            \r\n            return <TodoItem \r\n                        todoName= {list}\r\n                        key= {index}\r\n                        itemID={index}\r\n                        clickDone={() => this.DoneListHandler(list, index)}\r\n                        editTextChange ={(textIncome) => this.editItemHandler(textIncome, index)}\r\n                        delete={() => this.deleteItemHandler(index)}\r\n                />\r\n                \r\n        });\r\n\r\n        const displayHistory = (<div>\r\n            <TodoHistory \r\n                action={this.state.historyAction}\r\n                time={this.state.historyTime}\r\n                key={this.state.historyAction.map((ls, id) => {\r\n                    return id;\r\n                }) }\r\n                />\r\n        </div>);\r\n\r\n        /*const showDoneList = this.state.doneLists.map((ls, id) => {\r\n            return <div><DoneList \r\n                        finishList={ls}\r\n                        getTime={this.state.doneTime}\r\n                        key={id}\r\n                    /></div>\r\n        });\r\n        */\r\n\r\n        const showDoneList = (\r\n            <div>\r\n                <DoneList \r\n                    finishList={this.state.doneLists.map((ls) => {\r\n                        return (<h4 key={ls} style={{color: '#009688'}}>{ls}</h4>);\r\n                    })}\r\n                    getTime={this.state.doneTime}\r\n                    key={this.state.doneLists.map((ls, id) => {\r\n                        return id;\r\n                    })}\r\n                />\r\n            </div>\r\n        )\r\n\r\n        return(\r\n            <div>\r\n                <Route exat path='/Todo-List/add-todo' render={() => (\r\n                    <div >\r\n                        <AddTodo\r\n                            value={this.state.addTodo}\r\n                            changed={(event) => this.setState({addTodo: event.target.value})}\r\n                            clicked={() => this.addItemHandler(this.state.addTodo)}\r\n                            cleared={this.ClearItemHandler}\r\n                            key={this.state.addList.map((ls, id) => {\r\n                                return id;\r\n                            })}\r\n                />\r\n                {displayList}\r\n                    </div>\r\n                )} >\r\n                </Route>\r\n\r\n                <Route path='/Todo-List/done-lists' render={() => (\r\n                    <div style={{textAlign:'center'}}>\r\n                        {showDoneList}\r\n                    </div>\r\n                )} />\r\n\r\n                <Route path='/Todo-List/history' render={() => (\r\n                    <div>\r\n                        {displayHistory}\r\n                    </div>\r\n                )} />\r\n\r\n                <Redirect from='/' to='/Todo-List/add-todo' />  \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoList;\r\n","import React, { Component } from 'react';\nimport { BrowserRouter} from 'react-router-dom';\nimport Header from './Components/Headers/Header';\nimport TodoList from './Container/TodoList/Todolist';\n\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n        <BrowserRouter>\n          <div className=\"App\">\n              <Header />\n              <TodoList /> \n          </div>         \n          <h4 className=\"Credit\" onClick={() => alert('Version 1.01 Date 24/Sep/2019')} >V. 1.01 BY MJDC</h4>\n        </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();\n"],"sourceRoot":""}